import {
  Injectable,
  OnModuleInit,
  UnauthorizedException,
  InternalServerErrorException,
  Logger,
  NotFoundException,
  BadRequestException,
  ForbiddenException,
} from '@nestjs/common';
import { PrismaService } from '../../../infrastructure/database/prisma/prisma.service';
import { AuthDto, KeycLoakDto } from './dto';
import { ConfigService } from '@nestjs/config';
import axios from 'axios';
import KcAdminClient from '@keycloak/keycloak-admin-client';
import * as https from 'https';
import { MailService } from '../../../common/mail/send/mail.service';
import { tokenService } from '../token';
@Injectable()
export class AuthService implements OnModuleInit {
  private readonly logger = new Logger(AuthService.name);
  private keycloakConfig: KeycLoakDto.KeycloakConfigDto;
  private kcAdminClient: KcAdminClient;
  private refreshTokenService: tokenService.KeycloakTokenRefreshService;

  constructor(
    private readonly prisma: PrismaService,
    private readonly configService: ConfigService,
    private readonly mailService: MailService,
  ) {
    this.keycloakConfig = this.configService.getOrThrow<KeycLoakDto.KeycloakConfigDto>('keycloak');
  }

  async onModuleInit() {
    try {
      this.logger.log('Initializing Keycloak Admin Client', {
        baseUrl: this.keycloakConfig.authServerUrl,
        realmName: this.keycloakConfig.realm,
      });

      this.kcAdminClient = new KcAdminClient({
        baseUrl: this.keycloakConfig.authServerUrl,
        realmName: this.keycloakConfig.realm,
        requestConfig: {
          httpsAgent: new https.Agent({ rejectUnauthorized: false }),
        },
      } as any);

      await this.kcAdminClient.auth({
        grantType: 'client_credentials',
        clientId: this.keycloakConfig.clientId,
        clientSecret: this.keycloakConfig.secret,
      });

      this.logger.log('Keycloak Admin Client initialized successfully');
    } catch (error) {
      this.logger.error('Error initializing Keycloak Admin Client', error);
      throw new InternalServerErrorException('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–æ–≤');
    }
  }

  private generatePassword(length = 12): string {
    const charset = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()_+";
    let password = "";
    for (let i = 0; i < length; i++) {
      password += charset.charAt(Math.floor(Math.random() * charset.length));
    }
    return password;
  }

  private async requestToken(searchParams: Record<string, string>): Promise<KeycLoakDto.KeycloakTokenResponseDto> {
    try {
      this.logger.log('Sending token request with params:', searchParams);
      
      const response = await axios.post<KeycLoakDto.KeycloakTokenResponseDto>(
        `${this.keycloakConfig.authServerUrl}/realms/${this.keycloakConfig.realm}/protocol/openid-connect/token`,
        new URLSearchParams(searchParams),
        {
          headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
        },
      );
      
      this.logger.log('Token received successfully:', response.data);
      return response.data;
    } catch (error) {
      if (axios.isAxiosError(error) && error.response) {
        this.logger.error('Token request error:', error.response.data);
        throw new InternalServerErrorException(
          `–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Ç–æ–∫–µ–Ω–∞: ${JSON.stringify(error.response.data)}`
        );
      }
      this.logger.error('Unexpected error during token request', error);
      throw new InternalServerErrorException('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Ç–æ–∫–µ–Ω–∞');
    }
  }


  async register(email: string, phoneNumber: string, firstName: string, lastName: string) {
  try {
    const existing = await this.prisma.applications.findFirst({
      where: {
        OR: [
          { email },
          { phoneNumber },
        ],
      },
    });

    if (existing) {
      throw new BadRequestException('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email –∏–ª–∏ –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É–∂–µ –ø–æ–¥–∞–ª –∑–∞—è–≤–∫—É');
    }

    const newApplication = await this.prisma.applications.create({
      data: {
        email,
        phoneNumber,
        firstName,
        lastName,
        status: 'PENDING',
      },
    });

    return {
      success: true,
      message: '–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞',
      application: newApplication,
    };
  } catch (error) {
    this.logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏', error);

    // üî• –ü—Ä–æ–±—Ä–æ—Å –µ—Å–ª–∏ —ç—Ç–æ HttpException
    if (error instanceof UnauthorizedException ||
        error instanceof BadRequestException ||
        error instanceof NotFoundException ||
        error instanceof ForbiddenException) {
      throw error;
    }

    throw new InternalServerErrorException('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏');
  }
}

  

  async validateUser(loginDto: AuthDto.LoginDto) {
    try {
      const searchParams: Record<string, string> = {
        grant_type: 'password',
        client_id: this.keycloakConfig.clientId,
        client_secret: this.keycloakConfig.secret,
        username: loginDto.email,
        password: loginDto.password,
      };

      this.logger.log(`Attempting to authenticate user: ${loginDto.email}`);

      const tokenResponse = await this.requestToken(searchParams);

      if (tokenResponse?.access_token) {
        this.logger.log(`User authenticated: ${loginDto.email}`);
        const user = await this.prisma.applications.findUnique({
          where: { email: loginDto.email },
        });

        if (user && user.status === 'APPROVED') {
          return {
            success: true,
            message: '–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ',
            user,
            access_token: tokenResponse.access_token,
            refresh_token: tokenResponse.refresh_token,
          };
        } else {
          this.logger.warn(`User ${loginDto.email} not approved or not found`);
          throw new ForbiddenException('–£—á–µ—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –Ω–µ –æ–¥–æ–±—Ä–µ–Ω–∞ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        }
      }
      throw new UnauthorizedException('–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
    } catch (error) {
      if (axios.isAxiosError(error) && error.response) {
        this.logger.warn(`Authentication error for user ${loginDto.email}:`, error.response.data);
        switch (error.response.status) {
          case 400:
            throw new BadRequestException('–ù–µ–≤–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏');
          case 401:
            throw new UnauthorizedException('–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
          case 403:
            throw new ForbiddenException('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
          case 404:
            throw new NotFoundException('–†–µ—Å—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω');
          case 500:
            throw new InternalServerErrorException('–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
          default:
            throw new InternalServerErrorException('–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏');
        }
      }
      this.logger.error(`Unexpected error during authentication for user ${loginDto.email}:`, error);
      throw new InternalServerErrorException('–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏');
    }
  }

  async login(loginDto: AuthDto.LoginDto) {
    return this.validateUser(loginDto);
  }

  async checkKeycloakConnection(): Promise<boolean> {
    try {
      const searchParams: Record<string, string> = {
        grant_type: 'client_credentials',
        client_id: this.keycloakConfig.clientId,
        client_secret: this.keycloakConfig.secret,
      };

      const tokenResponse = await this.requestToken(searchParams);

      if (tokenResponse.access_token) {
        this.logger.log('–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Keycloak');
        return true;
      } else {
        this.logger.warn('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Keycloak –≤—ã–ø–æ–ª–Ω–µ–Ω–æ, –Ω–æ —Ç–æ–∫–µ–Ω –Ω–µ –ø–æ–ª—É—á–µ–Ω');
        return false;
      }
    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Keycloak: ${error.message}`, error.response?.data);
      return false;
    }
  }

  async createKeycloakUser(userData: {
    email: string;
    firstName: string;
    lastName: string;
    password: string;
  }) {
    try {
      const user = await this.kcAdminClient.users.create({
        realm: this.keycloakConfig.realm,
        username: userData.email,
        email: userData.email,
        firstName: userData.firstName,
        lastName: userData.lastName,
        enabled: true,
        emailVerified: true,
      });

      await this.kcAdminClient.users.resetPassword({
        realm: this.keycloakConfig.realm,
        id: user.id,
        credential: {
          temporary: false,
          type: 'password',
          value: userData.password,
        },
      });

      this.logger.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω –≤ Keycloak —Å id: ${user.id}`);
      return user;
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Keycloak', error);
      throw new InternalServerErrorException('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Keycloak');
    }
  }



  async approveApplication(applicationId: string, status: 'APPROVED' | 'REJECTED') {
    try {
      const application = await this.prisma.applications.findUnique({
        where: { id: applicationId },
      });

      if (!application) {
        throw new NotFoundException('–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      }

      if (application.status !== 'PENDING') {
        throw new BadRequestException('–ó–∞—è–≤–∫–∞ –Ω–µ –≤ —Å—Ç–∞—Ç—É—Å–µ PENDING');
      }

      if (status === 'APPROVED') {
        const password = this.generatePassword();

        const keycloakUser = await this.createKeycloakUser({
          email: application.email,
          firstName: application.firstName,
          lastName: application.lastName,
          password: password,
        });

        if (!keycloakUser) {
          throw new InternalServerErrorException('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Keycloak');
        }

        await this.prisma.applications.update({
          where: { id: applicationId },
          data: { status: 'APPROVED' },
        });

        await this.mailService.sendPasswordEmail(application.email, password);

        return { message: '–ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω –≤ Keycloak –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω –ø–æ email' };
      } else if (status === 'REJECTED') {
        await this.prisma.applications.update({
          where: { id: applicationId },
          data: { status: 'REJECTED' },
        });

        return { message: '–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞' };
      } else {
        throw new BadRequestException('–ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å');
      }
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞—è–≤–∫–∏', error);
      throw new InternalServerErrorException('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞—è–≤–∫–∏');
    }
  }



  
  async revertApplicationDecision(applicationId: string) {
    try {
      const application = await this.prisma.applications.findUnique({
        where: { id: applicationId },
      });

      if (!application) {
        throw new NotFoundException('–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      }

      if (application.status === 'PENDING') {
        throw new BadRequestException('–ó–∞—è–≤–∫–∞ —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ PENDING');
      }

      if (application.status === 'APPROVED') {
        try {
          const users = await this.kcAdminClient.users.find({
            email: application.email,
            realm: this.keycloakConfig.realm,
          });

          if (users && users.length > 0) {
            for (const user of users) {
              await this.kcAdminClient.users.del({
                id: user.id,
                realm: this.keycloakConfig.realm,
              } as any);
              this.logger.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Keycloak —Å id ${user.id} —É–¥–∞–ª—ë–Ω`);
            }
          }
        } catch (err) {
          this.logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Keycloak', err);
          throw new InternalServerErrorException('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞—è–≤–∫–∏');
        }
      }

      await this.prisma.applications.update({
        where: { id: applicationId },
        data: { status: 'PENDING' },
      });

      return { message: '–†–µ—à–µ–Ω–∏–µ –ø–æ –∑–∞—è–≤–∫–µ –æ—Ç–º–µ–Ω–µ–Ω–æ, —Å—Ç–∞—Ç—É—Å —Å–±—Ä–æ—à–µ–Ω –Ω–∞ PENDING' };
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —Ä–µ—à–µ–Ω–∏—è –ø–æ –∑–∞—è–≤–∫–µ', error);
      throw new InternalServerErrorException('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —Ä–µ—à–µ–Ω–∏—è –ø–æ –∑–∞—è–≤–∫–µ');
    }
  }

  async getAllApplications() {
    try {
      const applications = await this.prisma.applications.findMany();
      return { success: true, applications };
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫', error);
      return { success: false, message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫', error: error.message };
    }
  }
}
